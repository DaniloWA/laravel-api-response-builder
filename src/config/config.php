<?php

return [
    /*
    |---------------------------------------------------------------------------
    | Custom Response Structure
    |---------------------------------------------------------------------------
    |
    | Define a custom structure for responses. The example below includes
    | 'status', 'message', and 'data', but you can modify this as needed.
    |
    */
    'custom_response_structure' => [
        'status' => 'status',
        'message' => 'message',
        'data' => 'data',
    ],

    /*
    |--------------------------------------------------------------------------
    | Default Response Format
    |--------------------------------------------------------------------------
    |
    | This value determines the default format of responses generated by the
    | package. You can set it to 'json'. XML support is currently under construction.
    |
    */
    'default_format' => 'json',

    /*
    |--------------------------------------------------------------------------
    | Default JSON Options
    |--------------------------------------------------------------------------
    |
    | Options for JSON encoding. You can specify JSON encoding options.
    |
    */
    'json_options' => JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE,

    /*
    |--------------------------------------------------------------------------
    | Default XML Root Element
    |--------------------------------------------------------------------------
    |
    | Defines the default root element name for XML responses.
    | XML support is currently under construction.
    |
    */
    'xml_root_element' => 'response',

    /*
    |--------------------------------------------------------------------------
    | Default Status Code
    |--------------------------------------------------------------------------
    |
    | This value sets the default HTTP status code for the responses.
    |
    */
    'default_status_code' => 200,

    /*
    |--------------------------------------------------------------------------
    | Response Data Wrapper
    |--------------------------------------------------------------------------
    |
    | If enabled, the response data will be wrapped in an additional 'data'
    | key. This is useful if you want a consistent structure for all responses.
    |
    */
    'wrap_data' => true,

    /*
    |--------------------------------------------------------------------------
    | Response Data Wrapper Key
    |--------------------------------------------------------------------------
    |
    | This value sets the key used to wrap the response data. By default, it is
    | 'data', but you can customize it according to your API structure.
    |
    */
    'wrap_data_key' => 'items',

    /*
    |--------------------------------------------------------------------------
    | Default Locale
    |--------------------------------------------------------------------------
    |
    | This value sets the default locale for the custom messages.
    |
    */
    'default_locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Default Response Language
    |--------------------------------------------------------------------------
    |
    | Define the default language for responses.
    |     en - English
    |     pt - Portuguese
    |
    */
    'default_response_language' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Response Compression
    |--------------------------------------------------------------------------
    |
    | If true, responses will be compressed to reduce payload size.
    |
    */
    'compress_responses' => false,

    /*
    |---------------------------------------------------------------------------
    | API Key Header
    |---------------------------------------------------------------------------
    |
    | Define the name of the header used for API keys.
    |
    */
    'api_key_header' => 'X-API-KEY',

    /*
    |--------------------------------------------------------------------------
    | Log Responses
    |--------------------------------------------------------------------------
    |
    | If true, responses will be logged for debugging or auditing purposes.
    |
    */
    'log_responses' => false,

    /*
    |---------------------------------------------------------------------------
    | Request Logging
    |---------------------------------------------------------------------------
    |
    | If true, requests will be logged for debugging or auditing purposes.
    |
    */
    'log_requests' => false,

    /*
    |---------------------------------------------------------------------------
    | Response Time Logging
    |---------------------------------------------------------------------------
    |
    | If true, the time taken to generate responses will be logged.
    |
    */
    'log_response_time' => false,

    /*
    |--------------------------------------------------------------------------
    | Logging Level
    |--------------------------------------------------------------------------
    |
    | Define the level of detail for logging responses ('emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug').
    |
    */
    'logging_level' => 'info',

    /*
    |---------------------------------------------------------------------------
    | Log Files Path
    |---------------------------------------------------------------------------
    |
    | Define the paths for different log levels.
    |
    */
    'log_files' => [
        'info' => storage_path('logs/responsebuilder/info.log'),
        'error' => storage_path('logs/responsebuilder/error.log'),
        'alert' => storage_path('logs/responsebuilder/alert.log'),
        'warning' => storage_path('logs/responsebuilder/warning.log'),
        'notice' => storage_path('logs/responsebuilder/notice.log'),
        'critical' => storage_path('logs/responsebuilder/critical.log'),
        'debug' => storage_path('logs/responsebuilder/debug.log'),
        'emergency' => storage_path('logs/responsebuilder/emergency.log'),
    ],

];
